<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content="Free Video Downloader for YouTube, Instagram, Facebook, and more. Paste your video link and download in Full HD with compression options." />
  <meta name="keywords" content="video downloader, YouTube downloader, Instagram reels, HD video download, online downloader" />
  <meta name="author" content="Your Name" />
  <link rel="canonical" href="https://yourwebsite.com/" />
  <meta property="og:title" content="Free Full HD Video Downloader" />
  <meta property="og:description" content="Download videos from YouTube, Instagram, and more in Full HD instantly." />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://yourwebsite.com/" />
  <meta property="og:image" content="https://yourwebsite.com/preview.jpg" />
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "WebApplication",
    "name": "HD Video Downloader",
    "url": "https://yourwebsite.com",
    "applicationCategory": "Multimedia",
    "operatingSystem": "All",
    "aggregateRating": {"@type": "AggregateRating", "ratingValue": "4.8", "reviewCount": "1500"}
  }
  </script>
  <title>Free Full HD Video Downloader</title>
  <!-- ‚úÖ Google AdSense Script -->
  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-app-pub-3362956243451098/6105026341" crossorigin="anonymous"></script>
  <style>
    :root {
      --primary: #007bff;
      --primary-dark: #0056d2;
      --secondary: #6c757d;
      --success: #28a745;
      --danger: #dc3545;
      --light: #f8f9fa;
      --dark: #343a40;
      --shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      --radius: 0.5rem;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Poppins', sans-serif;
      background: #f8f9fb;
      margin: 0;
      padding: 0;
      color: #333;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      line-height: 1.6;
    }
    
    header {
      text-align: center;
      padding: 2rem 1rem;
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: #fff;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    
    header h1 {
      margin-bottom: 0.5rem;
      font-size: 2.2rem;
    }
    
    header p {
      font-size: 1.1rem;
      opacity: 0.9;
    }
    
    .container {
      flex: 1;
      max-width: 800px;
      margin: 2rem auto;
      background: #fff;
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 2rem;
      position: relative;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }
    
    input[type="url"] {
      width: 100%;
      padding: 0.8rem;
      border-radius: var(--radius);
      border: 1px solid #ccc;
      font-size: 1rem;
      transition: border-color 0.3s, box-shadow 0.3s;
    }
    
    input[type="url"]:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
    }
    
    select, button {
      padding: 0.7rem 1rem;
      border-radius: var(--radius);
      border: none;
      font-size: 1rem;
      margin-top: 0.5rem;
      width: 100%;
    }
    
    select {
      background-color: white;
      border: 1px solid #ccc;
      cursor: pointer;
    }
    
    button {
      background: var(--primary);
      color: white;
      cursor: pointer;
      transition: 0.3s;
      font-weight: 500;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }
    
    button:hover {
      background: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    button:active {
      transform: translateY(0);
    }
    
    button:disabled {
      background: var(--secondary);
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    
    .options-row {
      display: flex;
      gap: 1rem;
    }
    
    .options-row .form-group {
      flex: 1;
    }
    
    .ads-section {
      margin: 2rem 0;
      text-align: center;
      border: 2px dashed #ddd;
      border-radius: 8px;
      padding: 1rem;
      background: #fafafa;
    }
    
    #result {
      margin-top: 2rem;
      text-align: center;
    }
    
    .video-info {
      background: var(--light);
      border-radius: var(--radius);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      text-align: left;
    }
    
    .video-info h3 {
      margin-bottom: 1rem;
      color: var(--dark);
    }
    
    .video-thumbnail {
      max-width: 100%;
      border-radius: var(--radius);
      margin: 1rem 0;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .download-options {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      margin-top: 1.5rem;
    }
    
    .download-btn {
      width: auto;
      min-width: 150px;
    }
    
    .spinner {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: #fff;
      animation: spin 1s ease-in-out infinite;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .error-message {
      color: var(--danger);
      background: #ffe6e6;
      padding: 1rem;
      border-radius: var(--radius);
      margin-top: 1rem;
    }
    
    .success-message {
      color: var(--success);
      background: #e6ffe6;
      padding: 1rem;
      border-radius: var(--radius);
      margin-top: 1rem;
    }
    
    footer {
      text-align: center;
      padding: 1.5rem;
      font-size: 0.9rem;
      background: #f1f1f1;
      color: var(--secondary);
    }
    
    .footer-links {
      margin-top: 0.5rem;
    }
    
    .footer-links a {
      color: var(--primary);
      text-decoration: none;
      margin: 0 0.5rem;
    }
    
    .footer-links a:hover {
      text-decoration: underline;
    }
    
    @media (max-width: 768px) {
      .container {
        margin: 1rem;
        padding: 1.5rem;
      }
      
      .options-row {
        flex-direction: column;
        gap: 0;
      }
      
      header h1 {
        font-size: 1.8rem;
      }
      
      header p {
        font-size: 1rem;
      }
    }
    
    @media (max-width: 480px) {
      .container {
        padding: 1rem;
      }
      
      button, select, input {
        font-size: 0.9rem;
      }
      
      .download-options {
        flex-direction: column;
      }
      
      .download-btn {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <header>
    <h1>üé• Free Full HD Video Downloader</h1>
    <p>Download videos from YouTube, Instagram, Facebook & more in HD quality</p>
  </header>

  <!-- üî∏Top Ad Space (Leaderboard Ad Unit) -->
  <div class="ads-section">
    <ins class="adsbygoogle" style="display:block" data-ad-client="ca-app-pub-3362956243451098/6105026341" data-ad-slot="1111111111" data-ad-format="auto" data-full-width-responsive="true"></ins>
    <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
  </div>

  <main class="container">
    <form id="downloadForm">
      <div class="form-group">
        <label for="videoLink">Video URL:</label>
        <input type="url" id="videoLink" placeholder="Paste video link here (YouTube, Instagram, Facebook, etc.)" required aria-label="Paste video link" />
      </div>
      
      <div class="options-row">
        <div class="form-group">
          <label for="compression">Compression Level:</label>
          <select id="compression">
            <option value="none">None (Best Quality)</option>
            <option value="low">Low</option>
            <option value="medium" selected>Medium</option>
            <option value="high">High (Smallest File)</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="format">Download Format:</label>
          <select id="format">
            <option value="mp4" selected>MP4</option>
            <option value="webm">WebM</option>
            <option value="mkv">MKV</option>
            <option value="audio">Audio Only (MP3)</option>
          </select>
        </div>
      </div>
      
      <button type="submit" id="submitBtn">
        <span id="btnText">Download Now</span>
        <div id="btnSpinner" class="spinner" style="display: none;"></div>
      </button>
    </form>

    <!-- üî∏Middle Ad Space (In-Content Ad Unit) -->
    <div class="ads-section">
      <ins class="adsbygoogle" style="display:block" data-ad-client="ca-app-pub-3362956243451098/6105026341" data-ad-slot="2222222222" data-ad-format="auto" data-full-width-responsive="true"></ins>
      <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
    </div>

    <div id="result"></div>
  </main>

  <!-- üî∏Bottom Ad Space (Footer Banner Ad Unit) -->
  <div class="ads-section">
    <ins class="adsbygoogle" style="display:block" data-ad-client="ca-app-pub-3362956243451098/6105026341" data-ad-slot="3333333333" data-ad-format="auto" data-full-width-responsive="true"></ins>
    <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
  </div>

  <footer>
    <p>Made with ‚ù§Ô∏è by Your Name | ¬© 2025 HD Video Downloader</p>
    <div class="footer-links">
      <a href="/privacy">Privacy Policy</a>
      <a href="/terms">Terms of Service</a>
      <a href="/contact">Contact Us</a>
    </div>
  </footer>

  <script>
    document.getElementById('downloadForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const link = document.getElementById('videoLink').value.trim();
      const compression = document.getElementById('compression').value;
      const format = document.getElementById('format').value;
      
      // UI elements
      const submitBtn = document.getElementById('submitBtn');
      const btnText = document.getElementById('btnText');
      const btnSpinner = document.getElementById('btnSpinner');
      const resultDiv = document.getElementById('result');

      if (!link) {
        showError('Please paste a valid video link.');
        return;
      }

      // Validate URL format
      if (!isValidUrl(link)) {
        showError('Please enter a valid URL.');
        return;
      }

      // Show loading state
      submitBtn.disabled = true;
      btnText.textContent = 'Processing...';
      btnSpinner.style.display = 'block';
      resultDiv.innerHTML = '';

      try {
        // In a real implementation, this would call your backend API
        // For demo purposes, we'll simulate the API response
        const response = await simulateApiCall(link, compression, format);
        
        if (response.success) {
          displayVideoInfo(response.data);
        } else {
          showError(response.error || 'Failed to fetch video information.');
        }
      } catch (err) {
        console.error('Error:', err);
        showError('Network error. Please check your connection and try again.');
      } finally {
        // Reset button state
        submitBtn.disabled = false;
        btnText.textContent = 'Download Now';
        btnSpinner.style.display = 'none';
      }
    });

    // Helper function to validate URLs
    function isValidUrl(string) {
      try {
        new URL(string);
        return true;
      } catch (_) {
        return false;
      }
    }

    // Function to display error messages
    function showError(message) {
      const resultDiv = document.getElementById('result');
      resultDiv.innerHTML = `<div class="error-message">${message}</div>`;
    }

    // Function to display video information and download options
    function displayVideoInfo(data) {
      const resultDiv = document.getElementById('result');
      const compression = document.getElementById('compression').value;
      const format = document.getElementById('format').value;
      
      let downloadOptions = '';
      
      // Generate download options for different qualities (simulated)
      if (data.qualities && data.qualities.length > 0) {
        downloadOptions = data.qualities.map(quality => 
          `<a href="${quality.url}" target="_blank" class="download-btn" style="text-decoration: none;">
            <button class="download-btn">Download ${quality.resolution}</button>
          </a>`
        ).join('');
      } else {
        // Fallback to single download button
        downloadOptions = `
          <a href="${data.downloadUrl}" target="_blank" class="download-btn" style="text-decoration: none;">
            <button class="download-btn">Download ${format.toUpperCase()} (${compression})</button>
          </a>
        `;
      }
      
      resultDiv.innerHTML = `
        <div class="video-info">
          <h3>${data.title || 'Video Found'}</h3>
          ${data.duration ? `<p><strong>Duration:</strong> ${data.duration}</p>` : ''}
          ${data.thumbnail ? `<img src="${data.thumbnail}" alt="Video thumbnail" class="video-thumbnail" loading="lazy" />` : ''}
          <div class="download-options">
            ${downloadOptions}
          </div>
        </div>
        <div class="success-message">
          Your video is ready to download! Choose your preferred quality above.
        </div>
      `;
    }

    // Simulated API call - replace with actual backend integration
    function simulateApiCall(url, compression, format) {
      return new Promise((resolve) => {
        // Simulate network delay
        setTimeout(() => {
          // In a real implementation, this would be your actual API response
          const supportedPlatforms = [
            'youtube.com', 'youtu.be', 'instagram.com', 'facebook.com', 
            'tiktok.com', 'twitter.com', 'vimeo.com'
          ];
          
          const domain = new URL(url).hostname;
          const isSupported = supportedPlatforms.some(platform => domain.includes(platform));
          
          if (!isSupported) {
            resolve({
              success: false,
              error: 'This platform is not supported. Please try a video from YouTube, Instagram, Facebook, TikTok, Twitter, or Vimeo.'
            });
            return;
          }
          
          // Simulate successful response
          resolve({
            success: true,
            data: {
              title: 'Sample Video Title',
              duration: '5:30',
              thumbnail: 'https://via.placeholder.com/640x360/007bff/ffffff?text=Video+Thumbnail',
              downloadUrl: '#',
              qualities: [
                { resolution: '1080p HD', url: '#' },
                { resolution: '720p HD', url: '#' },
                { resolution: '480p', url: '#' },
                { resolution: '360p', url: '#' }
              ]
            }
          });
        }, 1500); // Simulate 1.5 second API response time
      });
    }
  </script>
</body>
</html>
